module conv (
    input clk,
    input [7:0] flg,
    input [((128*128*8)-1):0] inp_matrix,
    output reg [((126*126*15)-1):0] out_matrix
);

parameter N = 8;
parameter n = 3;
parameter img1 = 128;
parameter img = 128;
parameter dt = 8;

reg [N:0] array [0:(img1-1)*(img1-1)-1];
reg [N:0] out [0:(img-1)-(n-1)*(img-1)-(n-1)];
reg [2*dt-1:0] Aout [0:(img-(n-1))*(img-(n-1))-1];
reg [N:0] ker [0:n*n-1];
reg [2:0] state;
reg [N:0] dotpdt;
reg [(N+1)*n-1:0] array1, array2;
integer i, j, k, p, q, addr;

wire [N:0] dout;

systolic_array sys_array (
    .clk(clk),
    .flg(flg),
    .array1(array1),
    .array2(array2),
    .dout(dout)
);

// Initialize array and kernel
initial begin
    for (i = 0; i < (img1-1)*(img1-1); i = i + 1) begin
        if (i < (n-1)*(img1-1) || i >= (img1-n)*(img1-1))
            array[i] = 0;
        else
            array[i] = inp_matrix[((i/(img1-1))*(img1)+(i%(img1-1)))*N +: N];
    end
    ker[0] = -1; ker[1] = 0; ker[2] = 1;
    ker[3] = -2; ker[4] = 0; ker[5] = 2;
    ker[6] = -1; ker[7] = 0; ker[8] = 1;
end

always @(posedge clk) begin
    case (state)
        0: begin // Initialization state
            dotpdt <= 0;
            i <= 0;
            j <= 0;
            state <= 1;
        end
        1: begin // Compute dot product
            if (flg < n) begin
                array1 <= 0;
                array2 <= 0;
                for (k = 0; k < n; k = k + 1) begin
                    array1 <= array1 + (array[i + flg + (j + k) *img1] << (k * (N + 1)));
                    array2 <= array2 + (ker[flg*n + k] << (k * (N + 1)));
                end
            end
            if (flg >= 2*n-1 && flg < 3*n) begin
                dotpdt <= dotpdt + dout;
            end
            if (flg == (3 * n - 1)) begin
                addr = i + (j * (img - (n - 1)));
                out[addr] <= dotpdt;
                j <= j + 1;
                if (j == (img - (n - 1))) begin
                    j <= 0;
                    i <= i + 1;
                end
                if (i == (img - (n - 1)))
                    state <= 2;
                else
                    dotpdt <= 0;
            end
        end
        2: begin // Store output to memory
            p <= 0;
            q <= 0;
            k <= 0;
            state <= 3;
        end
        3: begin // Concatenate output values
            out_matrix <= {out_matrix[(126*126*15)-1 -: (126*126*15)-(2*dt-1)], out[p + q * (img - (n - 1))], {(2*dt-1){1'b0}}};
            k <= k + 1;
            q <= q + 1;
            if (q == (img - (n - 1))) begin
                q <= 0;
                p <= p + 1;
            end
            if (p == (img - (n - 1)))
                state <= 0;
        end
    endcase
end

endmodule
