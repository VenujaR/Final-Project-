import numpy as np
from scipy.sparse import csr_matrix, random
#Creating sparse matrix with a density of 50%
sparse_matrix = random(128, 128, density=0.25, format='csr', dtype=np.int8)
sparse_matrix.data = np.abs(sparse_matrix.data)
print("\nThe Sparse Matrix is:")
print(sparse_matrix.toarray())

kernel = np.array([[0, 2, 0],
                   [3, 0, 0],
                   [2, 0, 3]])
print("\nThe kernel is:")
print(kernel)

print("\nThe result is :")


#function that perfoms 2D convolution
def convolution(matrix, con_kernel):
    matrix_rows, matrix_cols = matrix.shape
    con_kernel_rows, con_kernel_cols = con_kernel.shape
    result_rows = matrix_rows - con_kernel_rows + 1
    result_cols = matrix_cols - con_kernel_cols + 1
    result = np.zeros((result_rows, result_cols))

    flipped_kernel = np.flipud(np.fliplr(con_kernel))

    for i in range(result_rows):
        for j in range(result_cols):
            window = matrix[i:i + con_kernel_rows, j:j + con_kernel_cols]
            result[i, j] = np.sum(window.multiply(flipped_kernel))
    return result

sparse_matrix = csr_matrix(sparse_matrix)
convolution_result = convolution(sparse_matrix, kernel)
print("\nThe final resulr is :")
print(convolution_result)
